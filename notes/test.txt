what to test?

- Test to see if the component renders 
- test to the component renders with correct props - given certain props does the component renders right html
- test the component renders in different states. For example: if you have a nav bar the login button should render if the user is logout and not render if the user is logged in
- test that the component correctly reacts to events



What not to test?
- implementation details:- the more your tests resembles the way your software is used the more confidence they can give you. you want tests testing the behavior and not how the behavior is implemented. this also makes refactoring easer
- third party code:- you should be testing code that you’re writing in your project and not the code you’re consuming from an external library. Eg: if you’re using material UI, you don’t have to test the button component or the tabs component from the UI. Instead test the component that consumes the Material UI components
- code that is not important from a user point of view:- for example: if we have written a utility function that displays date in a user-friendly format you don’t have to test if the function was called by the component, instead you should test if the date was rendered in the expected format. 

RTL queries 
- every test we write generally involves the following basic steps
    - render the component
    - find an element rendered by the component
    - assert against the element found in step 2 which will pass or fail the test
- to render the component, we use the render method from RTL
- for assertion, we use expect passing in a value and combine it with a matcher function from jest or jest-dom
- Queries are the methods that Testing library provides to find elements on the page
- to find a single element on the page, we have
    - getBy..
    - queryBy..
    - findBy..
- to find multiple elements on the page, we have
    - getAllBy..
    - queryAllBy..
    - findAllBy..
- dots at the end of queries are for suffix. Suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId

- getBy… queries
    - getBy.. class of queries return the matching node for a query, and throw a descriptive error if no elements match or if more than one match is found
    - getByRole
        - getByRole queries for elements with the given role
        - Role refers to the ARIA role which provides semantic meaning to content to ensure people using assistive technologies are able to use them
        - by default, many semantic elements in HTML have a role
        - Button element has button role, anchor element has link role, h1 to h6 elements have a heading role, checkboxes have a checkbox role, radio buttons have a radio role and so on
        - if you’re working with elements that do not have a default role or if you want to specify a different role, the role attribute can be used to add the desired role
        - to use an anchor element as a button in the navbar, you can add role=‘button’
-  getByRole Options
    - name
        - the accessible name is for simple cases equal to
            - the label of a form element
            - the text content of a button or
            - the value of the aria-label attribute 
    - level
    - hidden
    - selected
    - checked
    - pressed

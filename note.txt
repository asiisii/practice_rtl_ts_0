React Testing Library

Jest vs RTL
 
Jest
- a JS testing framework
- a test runner that finds tests, runs the tests, determines whether the tests passed or failed and reports it back in a human readable manner

RTL
- JS testing utility that provides virtual DOM for testing React components
- React testing library provides DOM which we can use to interact with and verify the behavior of a react component
- testing library is in fact a family of packages which helps test UI components 
- the core library is called DOM Testing Library and RTL is simply a wrapper around this core library to test react applications in an easier way 

There are three types of tests
1. Unit Test
    1. Focus is on testing the individual building blocks of an application such as a class or a function or a component
    2. each unit or building block is tested in isolation, independent of other units 
    3. dependencies are mocked
    4. run in a short amount of time and make it very easy to pinpoint failures
    5. relatively easier to write and maintain
2. Integration test
    1. focus is on testing a combination of units and ensuring they work together
    2. take longer than unit test
3. E2E tests
    1. focus is on testing the entire application flow and ensuring it works as designed from start to finish 
    2. involves in a real UI, a real backend database, real services etc
    3. take the longest as they cover the most amount of code
    4. have a cost implication as you interact with real APIs that may charge based on the number of requests 


RTL Philosophy
- “The more your tests resemble the way your software is used, the more confidence they can give you”
- with RTL, we are not concerned about the implementation details of a component 
    - we’re not testing how it is rendering text, updating the state, handling a click event
    - we’re testing how the component behaves when the user interacts with it’


test
- test(name, fn, timeout)
    - first argument is the test name used to identify the test
    - second argument is a function that contains the expectations to test
    - third argument is timeout which is an optional argument for specifying how long to wait before aborting the test. The default timeout value is 5 secs

TDD
- a software development process where you write tests before writing the software code
- once the tests have been written, you then write the code to ensure the tests pass
    - create tests that verify the functionality of a specific feature
    - write software code that will run the tests successfully when re-executed
    - refactor the code for optimization while ensuring the test continue to pass
- Also called red-green testing as all tests go from a red failed state to a green passed state

Jest Watch Mode
- it is an option that we can pass to Jest asking to watch files that have changed since the last commit and execute tests related only to those changed files
- an optimization designed to make your tests run fast regardless of how many tests you have

Filename Conventions
- Files with .test.js or .test.tsx suffix
- files with .spec.js or .spec.tsx suffix
- files with .js or .tsx suffix in __tests__ folders
    - Recommendation is to always put your tests next to the code they’re testing so that relative imports are shorter

Code Coverage
- a metric that can help you understand how much of your software code is tested
    - statement coverage: how many of the statements in the software code have been executed
    - branches coverage: how many of the branches of the control structures(if statements for instance) have been executed
    - function coverage: how many of the functions defined have been called 
    - line coverage: how many of lines of source code have been tested

Assertions
- when writing tests, we often need to check that values meet certain conditions 
- assertions decide if a test fails or pass

expect
- expect(value)
- the argument should be the value that your code produces
- typically, you will use expect along with a “matcher” function to assert something about a value
- a matcher can optionally accept an argument which is the correct expected value 